<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>勤怠データ変換ツール</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f5f5;
        }
        .container {
            background-color: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        h1 {
            color: #2c3e50;
            text-align: center;
            margin-bottom: 30px;
        }
        .section {
            margin-bottom: 30px;
        }
        .section h2 {
            color: #34495e;
            border-bottom: 2px solid #3498db;
            padding-bottom: 10px;
        }
        textarea {
            width: 100%;
            height: 200px;
            padding: 15px;
            border: 2px solid #ddd;
            border-radius: 5px;
            font-family: monospace;
            font-size: 14px;
            resize: vertical;
        }
        textarea:focus {
            border-color: #3498db;
            outline: none;
        }
        button {
            background-color: #3498db;
            color: white;
            padding: 12px 30px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            margin: 10px 5px;
            transition: background-color 0.3s;
        }
        button:hover {
            background-color: #2980b9;
        }
        .output-area {
            background-color: #f8f9fa;
            border: 2px solid #e9ecef;
            border-radius: 5px;
            padding: 15px;
            min-height: 100px;
            font-family: monospace;
            white-space: pre-wrap;
        }
        .instructions {
            background-color: #e8f4fd;
            padding: 15px;
            border-radius: 5px;
            margin-bottom: 20px;
        }
        .table-preview {
            overflow-x: auto;
            margin-top: 20px;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            background-color: white;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: center;
        }
        th {
            background-color: #f2f2f2;
            font-weight: bold;
        }
        .weekend {
            background-color: #ffebee;
        }
        .holiday {
            background-color: #fff3e0;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>勤怠データ変換ツール</h1>
        
        <div class="instructions">
            <h3>使用方法：</h3>
            <ol>
                <li>PowerAppsの勤怠画面からデータをコピーして、下のテキストエリアに貼り付けてください</li>
                <li>「データを変換」ボタンをクリックしてください</li>
                <li>変換されたデータをExcelに貼り付けてください</li>
            </ol>
        </div>

        <div class="section">
            <h2>1. データ入力方法を選択</h2>
            <div style="margin-bottom: 20px;">
                <button onclick="showHtmlMode()" id="htmlModeBtn">HTMLソースから抽出</button>
                <button onclick="showManualMode()" id="manualModeBtn">手動入力</button>
                <button onclick="showTextMode()" id="textModeBtn">テキスト貼り付け</button>
            </div>
            
            <div id="htmlInputArea" style="display:none;">
                <h3>PowerAppsのHTMLソースを貼り付け</h3>
                <p style="color: #666; margin-bottom: 10px;">
                    1. F12で開発者ツールを開く<br>
                    2. Elementsタブで勤怠表の部分を見つける<br>
                    3. HTMLソース全体をコピーして下に貼り付け
                </p>
                <textarea id="htmlInputData" placeholder="開発者ツールからコピーしたHTMLソースをここに貼り付けてください..."></textarea>
                <button onclick="parseHtmlData()" id="htmlConvertBtn">HTMLから抽出</button>
            </div>
            
            <div id="manualInputArea" style="display:none;">
                <h3>手動入力フォーム</h3>
                <div id="manualInputForm"></div>
                <button onclick="addManualEntry()">日付を追加</button>
                <button onclick="generateFromManual()" id="manualConvertBtn">変換実行</button>
            </div>
            
            <div id="textInputArea">
                <h3>テキストデータを貼り付け</h3>
                <textarea id="inputData" placeholder="PowerAppsの勤怠データをここに貼り付けてください...

例：
24	(土)		・		・
25	(日)		テレ1日	20:49	テレ終了	21:53
26	(月)		出勤	9:10	退勤	19:57	9:30
テレ2h	22:04	テレ終了	24:09"></textarea>
                <button onclick="convertData()" id="textConvertBtn">データを変換</button>
            </div>
            
            <button onclick="clearInput()" style="margin-top: 10px;">すべてクリア</button>
        </div>

        <div class="section">
            <h2>2. 変換結果（Excelに貼り付け用）</h2>
            <div class="output-area" id="outputData">ここに変換されたデータが表示されます</div>
            <button onclick="copyToClipboard()" id="copyBtn" style="display:none;">クリップボードにコピー</button>
        </div>

        <div class="section">
            <h2>3. プレビュー表</h2>
            <div class="table-preview" id="tablePreview"></div>
        </div>
    </div>

    <script>
        let manualEntries = [];
        let currentInputMode = 'text';

        function showHtmlMode() {
            document.getElementById('htmlInputArea').style.display = 'block';
            document.getElementById('manualInputArea').style.display = 'none';
            document.getElementById('textInputArea').style.display = 'none';
            currentInputMode = 'html';
            
            // ボタンのスタイル更新
            updateModeButtons('htmlModeBtn');
        }

        function showManualMode() {
            document.getElementById('htmlInputArea').style.display = 'none';
            document.getElementById('manualInputArea').style.display = 'block';
            document.getElementById('textInputArea').style.display = 'none';
            currentInputMode = 'manual';
            
            // 手動入力フォームを初期化
            initManualForm();
            updateModeButtons('manualModeBtn');
        }

        function showTextMode() {
            document.getElementById('htmlInputArea').style.display = 'none';
            document.getElementById('manualInputArea').style.display = 'none';
            document.getElementById('textInputArea').style.display = 'block';
            currentInputMode = 'text';
            
            updateModeButtons('textModeBtn');
        }

        function updateModeButtons(activeId) {
            ['htmlModeBtn', 'manualModeBtn', 'textModeBtn'].forEach(id => {
                const btn = document.getElementById(id);
                if (id === activeId) {
                    btn.style.backgroundColor = '#2980b9';
                } else {
                    btn.style.backgroundColor = '#3498db';
                }
            });
        }

        function setButtonLoading(buttonId, isLoading) {
            const button = document.getElementById(buttonId);
            if (isLoading) {
                button.disabled = true;
                button.style.backgroundColor = '#95a5a6';
                button.textContent = '変換中...';
                button.style.cursor = 'not-allowed';
            } else {
                button.disabled = false;
                button.style.backgroundColor = '#3498db';
                button.style.cursor = 'pointer';
                // 元のテキストに戻す
                if (buttonId === 'htmlConvertBtn') button.textContent = 'HTMLから抽出';
                if (buttonId === 'manualConvertBtn') button.textContent = '変換実行';
                if (buttonId === 'textConvertBtn') button.textContent = 'データを変換';
            }
        }

        function parseHtmlData() {
            const htmlInput = document.getElementById('htmlInputData').value;
            if (!htmlInput.trim()) {
                alert('HTMLソースを入力してください');
                return;
            }

            setButtonLoading('htmlConvertBtn', true);
            
            // 少し遅延を入れて変換処理を実行（UIの更新を確実にするため）
            setTimeout(() => {
                try {
                    console.log('HTML解析を開始...');
                    
                    // HTMLから勤怠データを抽出
                    const parsedData = extractDataFromHtml(htmlInput);
                    console.log('抽出されたデータ:', parsedData);
                    
                    if (parsedData.length === 0) {
                        alert('HTMLソースから勤怠データを見つけられませんでした。\n\n以下を確認してください：\n- 勤怠表の部分が含まれているか\n- 日付や時刻のデータがあるか');
                        return;
                    }
                    
                    const csvOutput = generateCSV(parsedData);
                    const tablePreview = generateTable(parsedData);
                    
                    document.getElementById('outputData').textContent = csvOutput;
                    document.getElementById('tablePreview').innerHTML = tablePreview;
                    document.getElementById('copyBtn').style.display = 'inline-block';
                    
                    console.log('変換完了:', parsedData.length + '件のデータを変換しました');
                    
                } catch (error) {
                    console.error('HTML解析エラー:', error);
                    alert('HTMLの解析に失敗しました: ' + error.message);
                } finally {
                    setButtonLoading('htmlConvertBtn', false);
                }
            }, 100);
        }

        function extractDataFromHtml(html) {
            // HTMLソースから勤怠データを抽出する関数
            console.log('HTML解析開始...');
            const data = [];
            
            try {
                // HTMLソースから勤怠データを抽出する関数
                const tempDiv = document.createElement('div');
                tempDiv.innerHTML = html;
                const textContent = tempDiv.textContent || tempDiv.innerText || '';
                
                console.log('テキストコンテンツの長さ:', textContent.length);
                
                // より詳細なパターンマッチング
                const lines = textContent.split('\n').map(line => line.trim()).filter(line => line);
                console.log('処理する行数:', lines.length);
                
                // 時刻パターン (HH:MM, H:MM)
                const timePattern = /(\d{1,2}:\d{2})/g;
                // 日付パターン
                const datePattern = /(\d{1,2})\s*[\(（]([^）\)]+)[\)）]/;
                
                for (let i = 0; i < lines.length; i++) {
                    const line = lines[i];
                    
                    // 日付を含む行を検索
                    const dateMatch = line.match(datePattern);
                    if (dateMatch) {
                        const day = parseInt(dateMatch[1]);
                        const dayOfWeek = dateMatch[2];
                        
                        console.log(`日付発見: ${day}日(${dayOfWeek})`);
                        
                        const entry = {
                            day: day,
                            dayOfWeek: dayOfWeek,
                            vacation: '',
                            fieldWork: '',
                            startType: '',
                            startTime: '',
                            endType: '',
                            endTime: '',
                            workHours: ''
                        };
                        
                        // 前後数行も含めて詳細情報を検索
                        const contextStart = Math.max(0, i - 2);
                        const contextEnd = Math.min(lines.length, i + 5);
                        const contextLines = lines.slice(contextStart, contextEnd);
                        const contextText = contextLines.join(' ');
                        
                        console.log(`${day}日のコンテキスト:`, contextText);
                        
                        // 時刻を抽出
                        const times = contextText.match(/\d{1,2}:\d{2}/g) || [];
                        console.log(`${day}日の時刻:`, times);
                        
                        // 勤務タイプを判定
                        if (contextText.includes('テレ1日')) {
                            entry.startType = 'テレ1日';
                        } else if (contextText.includes('テレ2h')) {
                            entry.startType = 'テレ2h';
                        } else if (contextText.includes('出勤')) {
                            entry.startType = '出勤';
                        }
                        
                        if (contextText.includes('テレ終了')) {
                            entry.endType = 'テレ終了';
                        } else if (contextText.includes('退勤')) {
                            entry.endType = '退勤';
                        }
                        
                        // 時刻を割り当て
                        if (times.length >= 1) {
                            entry.startTime = times[0];
                        }
                        if (times.length >= 2) {
                            entry.endTime = times[1];
                        }
                        if (times.length >= 3) {
                            entry.workHours = times[2];
                        }
                        
                        // 休暇情報
                        if (contextText.includes('年休')) {
                            entry.vacation = '年休';
                        } else if (contextText.includes('半休')) {
                            entry.vacation = '半休';
                        }
                        
                        data.push(entry);
                        console.log(`${day}日のエントリ:`, entry);
                    }
                }
                
                console.log('抽出完了。総件数:', data.length);
                return data;
                
            } catch (error) {
                console.error('HTML解析中にエラー:', error);
                throw error;
            }
        }

        function initManualForm() {
            const formContainer = document.getElementById('manualInputForm');
            formContainer.innerHTML = '';
            manualEntries = [];
            
            // 今月の日数を取得
            const today = new Date();
            const year = today.getFullYear();
            const month = today.getMonth();
            const daysInMonth = new Date(year, month + 1, 0).getDate();
            
            for (let day = 1; day <= daysInMonth; day++) {
                const date = new Date(year, month, day);
                const dayOfWeek = ['日', '月', '火', '水', '木', '金', '土'][date.getDay()];
                
                const entry = {
                    day: day,
                    dayOfWeek: dayOfWeek,
                    vacation: '',
                    fieldWork: '',
                    startType: '出勤',
                    startTime: '',
                    endType: '退勤',
                    endTime: '',
                    workHours: ''
                };
                
                manualEntries.push(entry);
                
                const entryDiv = document.createElement('div');
                entryDiv.style.cssText = 'border: 1px solid #ddd; padding: 10px; margin: 5px 0; border-radius: 5px;';
                entryDiv.innerHTML = `
                    <div style="display: flex; align-items: center; gap: 10px; flex-wrap: wrap;">
                        <span style="min-width: 60px;">${day}日(${dayOfWeek})</span>
                        <select onchange="updateManualEntry(${day-1}, 'startType', this.value)">
                            <option value="出勤">出勤</option>
                            <option value="テレ1日">テレ1日</option>
                            <option value="テレ2h">テレ2h</option>
                            <option value="">休み</option>
                        </select>
                        <input type="time" placeholder="開始" onchange="updateManualEntry(${day-1}, 'startTime', this.value)" style="width: 80px;">
                        <select onchange="updateManualEntry(${day-1}, 'endType', this.value)">
                            <option value="退勤">退勤</option>
                            <option value="テレ終了">テレ終了</option>
                            <option value="">終了なし</option>
                        </select>
                        <input type="time" placeholder="終了" onchange="updateManualEntry(${day-1}, 'endTime', this.value)" style="width: 80px;">
                        <input type="text" placeholder="勤務時間" onchange="updateManualEntry(${day-1}, 'workHours', this.value)" style="width: 80px;">
                    </div>
                `;
                
                formContainer.appendChild(entryDiv);
            }
        }

        function updateManualEntry(index, field, value) {
            if (manualEntries[index]) {
                manualEntries[index][field] = value;
            }
        }

        function generateFromManual() {
            setButtonLoading('manualConvertBtn', true);
            
            setTimeout(() => {
                try {
                    console.log('手動入力データの変換を開始...');
                    
                    const filteredData = manualEntries.filter(entry => 
                        entry.startTime || entry.endTime || entry.startType !== '出勤'
                    );
                    
                    console.log('フィルタ後のデータ:', filteredData);
                    
                    if (filteredData.length === 0) {
                        alert('入力されたデータがありません');
                        return;
                    }
                    
                    const csvOutput = generateCSV(filteredData);
                    const tablePreview = generateTable(filteredData);
                    
                    document.getElementById('outputData').textContent = csvOutput;
                    document.getElementById('tablePreview').innerHTML = tablePreview;
                    document.getElementById('copyBtn').style.display = 'inline-block';
                    
                    console.log('変換完了:', filteredData.length + '件のデータを変換しました');
                    
                } catch (error) {
                    console.error('手動入力変換エラー:', error);
                    alert('データの変換に失敗しました: ' + error.message);
                } finally {
                    setButtonLoading('manualConvertBtn', false);
                }
            }, 100);
        }
            const input = document.getElementById('inputData').value;
            if (!input.trim()) {
                alert('データを入力してください');
                return;
            }

            try {
                const parsedData = parseAttendanceData(input);
                const csvOutput = generateCSV(parsedData);
                const tablePreview = generateTable(parsedData);
                
                document.getElementById('outputData').textContent = csvOutput;
                document.getElementById('tablePreview').innerHTML = tablePreview;
                document.getElementById('copyBtn').style.display = 'inline-block';
                
            } catch (error) {
                alert('データの変換に失敗しました: ' + error.message);
                console.error(error);
            }
        }

        function parseAttendanceData(input) {
            const lines = input.split('\n').filter(line => line.trim());
            const data = [];
            let currentDate = null;

            for (let i = 0; i < lines.length; i++) {
                const line = lines[i].trim();
                if (!line) continue;

                // 日付行の判定（数字から始まる行）
                const dateMatch = line.match(/^(\d{1,2})\s*（(.+)）/);
                if (dateMatch) {
                    const day = parseInt(dateMatch[1]);
                    const dayOfWeek = dateMatch[2];
                    
                    currentDate = {
                        day: day,
                        dayOfWeek: dayOfWeek,
                        vacation: '',
                        fieldWork: '',
                        startType: '',
                        startTime: '',
                        endType: '',
                        endTime: '',
                        workHours: ''
                    };

                    // 同じ行に他の情報がある場合の処理
                    const remainingLine = line.substring(dateMatch[0].length).trim();
                    if (remainingLine) {
                        parseAttendanceDetails(currentDate, remainingLine);
                    }
                    
                    data.push(currentDate);
                } else if (currentDate) {
                    // 日付以外の行は前の日付のデータとして処理
                    parseAttendanceDetails(currentDate, line);
                }
            }

            return data;
        }

        function parseAttendanceDetails(dateObj, line) {
            const parts = line.split('\t').map(p => p.trim()).filter(p => p && p !== '・');
            
            for (let i = 0; i < parts.length; i++) {
                const part = parts[i];
                
                // 時刻の判定（HH:MM形式）
                if (part.match(/^\d{1,2}:\d{2}$/)) {
                    const prevPart = parts[i-1];
                    if (prevPart && (prevPart.includes('出勤') || prevPart.includes('テレ'))) {
                        if (!dateObj.startTime) {
                            dateObj.startType = prevPart;
                            dateObj.startTime = part;
                        } else {
                            dateObj.endType = prevPart;
                            dateObj.endTime = part;
                        }
                    }
                } else if (part.includes('年休') || part.includes('半休')) {
                    dateObj.vacation = part;
                } else if (part.includes('外勤')) {
                    dateObj.fieldWork = part;
                } else if (part.match(/^\d{1,2}:\d{2}$/) && !dateObj.workHours) {
                    dateObj.workHours = part;
                }
            }
        }

        function generateCSV(data) {
            const headers = ['日付', '曜日', '休暇等', '外勤等', '出勤区分', '出勤時刻', '退勤区分', '退勤時刻', '勤務時間'];
            let csv = headers.join('\t') + '\n';
            
            data.forEach(row => {
                const csvRow = [
                    row.day,
                    row.dayOfWeek,
                    row.vacation,
                    row.fieldWork,
                    row.startType,
                    row.startTime,
                    row.endType,
                    row.endTime,
                    row.workHours
                ];
                csv += csvRow.join('\t') + '\n';
            });
            
            return csv;
        }

        function generateTable(data) {
            let html = '<table>';
            html += '<tr><th>日付</th><th>曜日</th><th>休暇等</th><th>外勤等</th><th>出勤区分</th><th>出勤時刻</th><th>退勤区分</th><th>退勤時刻</th><th>勤務時間</th></tr>';
            
            data.forEach(row => {
                const isWeekend = row.dayOfWeek === '土' || row.dayOfWeek === '日';
                const rowClass = isWeekend ? 'weekend' : '';
                
                html += `<tr class="${rowClass}">`;
                html += `<td>${row.day}</td>`;
                html += `<td>${row.dayOfWeek}</td>`;
                html += `<td>${row.vacation}</td>`;
                html += `<td>${row.fieldWork}</td>`;
                html += `<td>${row.startType}</td>`;
                html += `<td>${row.startTime}</td>`;
                html += `<td>${row.endType}</td>`;
                html += `<td>${row.endTime}</td>`;
                html += `<td>${row.workHours}</td>`;
                html += '</tr>';
            });
            
            html += '</table>';
            return html;
        }

        function copyToClipboard() {
            const output = document.getElementById('outputData').textContent;
            navigator.clipboard.writeText(output).then(() => {
                alert('クリップボードにコピーしました！');
            }).catch(err => {
                console.error('コピーに失敗しました: ', err);
                // フォールバック：テキストエリアを作成してコピー
                const textArea = document.createElement('textarea');
                textArea.value = output;
                document.body.appendChild(textArea);
                textArea.select();
                document.execCommand('copy');
                document.body.removeChild(textArea);
                alert('クリップボードにコピーしました！');
            });
        }

        function clearInput() {
            document.getElementById('inputData').value = '';
            document.getElementById('htmlInputData').value = '';
            document.getElementById('outputData').textContent = 'ここに変換されたデータが表示されます';
            document.getElementById('tablePreview').innerHTML = '';
            document.getElementById('copyBtn').style.display = 'none';
            manualEntries = [];
            if (currentInputMode === 'manual') {
                initManualForm();
            }
        }

        // 初期表示設定
        document.addEventListener('DOMContentLoaded', function() {
            showTextMode(); // デフォルトはテキストモード
        });

        // エラー修正：関数の順序を調整
        function convertData() {
            const input = document.getElementById('inputData').value;
            if (!input.trim()) {
                alert('データを入力してください');
                return;
            }

            setButtonLoading('textConvertBtn', true);
            
            setTimeout(() => {
                try {
                    console.log('テキストデータの変換を開始...');
                    
                    const parsedData = parseAttendanceData(input);
                    console.log('パース結果:', parsedData);
                    
                    if (parsedData.length === 0) {
                        alert('データを正しく解析できませんでした。\n\n形式を確認してください：\n例: 25 (日) テレ1日 20:49 テレ終了 21:53');
                        return;
                    }
                    
                    const csvOutput = generateCSV(parsedData);
                    const tablePreview = generateTable(parsedData);
                    
                    document.getElementById('outputData').textContent = csvOutput;
                    document.getElementById('tablePreview').innerHTML = tablePreview;
                    document.getElementById('copyBtn').style.display = 'inline-block';
                    
                    console.log('変換完了:', parsedData.length + '件のデータを変換しました');
                    
                } catch (error) {
                    console.error('テキスト変換エラー:', error);
                    alert('データの変換に失敗しました: ' + error.message);
                } finally {
                    setButtonLoading('textConvertBtn', false);
                }
            }, 100);
        }
    </script>
</body>
</html>